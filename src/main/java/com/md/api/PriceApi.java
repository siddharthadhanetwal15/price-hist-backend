/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.md.api;

import com.md.model.Price;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-07-18T11:15:17.747Z[GMT]")
@Validated
public interface PriceApi {

    @Operation(summary = "Add a new Price", description = "", security = {
        @SecurityRequirement(name = "price_auth", scopes = {
            "write:prices",
"read:prices"        })    }, tags={ "price" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Price created"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/price",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addPrice(@Parameter(in = ParameterIn.DEFAULT, description = "Price object that needs to be added", required=true, schema=@Schema()) @Valid @RequestBody Price body);


    @Operation(summary = "Deletes a price", description = "", security = {
        @SecurityRequirement(name = "price_auth", scopes = {
            "write:prices",
"read:prices"        })    }, tags={ "price" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Price deleted"),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Price not found") })
    @RequestMapping(value = "/price/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePrice(@Parameter(in = ParameterIn.PATH, description = "Price id to delete", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Get all prices", description = "", security = {
        @SecurityRequirement(name = "price_auth", scopes = {
            "write:prices",
"read:prices"        })    }, tags={ "price" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Prices retrieved successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Price.class)))),
        
        @ApiResponse(responseCode = "404", description = "Prices not found") })
    @RequestMapping(value = "/price",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Price>> getPrices();


    @Operation(summary = "Update an existing price", description = "", security = {
        @SecurityRequirement(name = "price_auth", scopes = {
            "write:prices",
"read:prices"        })    }, tags={ "price" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Price updated"),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Price not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/price",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePrice(@Parameter(in = ParameterIn.DEFAULT, description = "Price object that needs to be added", required=true, schema=@Schema()) @Valid @RequestBody Price body);

}

